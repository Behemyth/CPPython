[project]
description = "A Python management solution for C++ dependencies"
name = "cppython"

license = {text = "MIT"}

authors = [
  {name = "Synodic Software", email = "contact@synodic.software"},
]
readme = "README.md"

dynamic = ["version"]

requires-python = ">=3.13"

dependencies = [
  "typer>=0.15.0",
  "pydantic>=2.10.3",
  "packaging>=24.1",
  "requests>=2.32.3",
  "types-requests>=2.32.0.20241016",
]

[project.optional-dependencies]
pytest = [
  "pytest>=8.3.3",
  "pytest-mock>=3.14.0",
]

git = [
  "dulwich>=0.22.5",
]

pdm = [
  "pdm>=2.21.0",
]

[project.urls]
homepage = "https://github.com/Synodic-Software/CPPython"
repository = "https://github.com/Synodic-Software/CPPython"

[project.entry-points."cppython.scm"]
git = "cppython.plugins.git.plugin:GitSCM"

[project.entry-points."cppython.generator"]
cmake = "cppython.plugins.cmake.plugin:CMakeGenerator"

[project.entry-points."cppython.provider"]
conan = "cppython.plugins.conan.plugin:ConanProvider"
vcpkg = "cppython.plugins.vcpkg.plugin:VcpkgProvider"

[project.entry-points.pdm]
cppython = "cppython.plugins.pdm.plugin:CPPythonPlugin"

[dependency-groups]
lint = [
  "ruff>=0.8.1",
  "mypy>=1.13",
]
test = [
  "pytest>=8.3.4",
  "pytest-cov>=6.0.0",
  "pytest-mock>=3.14.0",
]

[project.scripts]
cppython = "cppython.console.entry:app"

[tool.pytest.ini_options]
log_cli = true
testpaths = [
  "tests",
]

[tool.mypy]
exclude = "__pypackages__"
plugins = ["pydantic.mypy"]
strict = true

[tool.ruff]
line-length = 120
preview = true

[tool.ruff.lint]
ignore = [
  "D206",
  "D300",
  "D415",
  "E111",
  "E114",
  "E117",
]
select = [
  "D", # pydocstyle
  "F", # Pyflakes
  "I", # isort
  "PL", # pylint
  "UP", # pyupgrade
  "E", # pycodestyle
  "B", # flake8-bugbear
  "SIM", # flake8-simplify
  "PT", # flake8-pytest-style
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
docstring-code-format = true
indent-style = "space"
quote-style = "single"

[tool.coverage.report]
skip_empty = true

[tool.pdm]
plugins = [
  "-e file:///${PROJECT_ROOT}",
]

[tool.pdm.options]
update = ["--update-all"]

[tool.pdm.version]
source = "scm"

[tool.pdm.scripts]
analyze = {shell = "ruff check cppython tests"}
format = {shell = "ruff format"}
lint = {composite = ["analyze", "format", "type-check"]}
test = {shell = "pytest --cov=cppython --verbose tests"}
type-check = {shell = "mypy ."}

[build-system]
build-backend = "pdm.backend"
requires = ["pdm.backend"]
